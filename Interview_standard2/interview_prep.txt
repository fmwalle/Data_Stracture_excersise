1
Given any string str, sort the characters in descending order based on the number of occurrences of each character in the string str.

Return an array of the characters in order. You may assume each character has a distinct frequency.


2
Let's define a group of anagrams as a list of words, where each group shares the same anagram.

Anagram means you can rearrange the letters to form any other word in the group (eg: tea could be transformed into eat).

Given a list of words, split it into the smallest possible number of groups of anagrams and return this number as the answer.

Example

For words = ["tea", "eat", "apple", "ate", "vaja", "cut", "java", "utc"], the output should be 4 (groups).

The 4 groups of anagrams in this example are ("tea", "eat", "ate"), ("apple"), ("vaja", "java"), and ("cut", "utc").

When solving this problem, consider how you tell whether any set of words are anagrams, and how you might group them together.

For example, "tea" and "eat" share the same anagram - think about how you would figure this out programmatically.

Ultimately, we want to return the number of groups (distinct anagrams, not distinct words) in the input array.

Input/Output