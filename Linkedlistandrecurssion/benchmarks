Given a linked list with all the inputs sorted in ascending order, delete all duplicate elements so each unique element only appears once. The list should remain sorted at the end.

[execution time limit] 4 seconds (py3)

[memory limit] 1 GB

[input] linkedlist.integer head

Head of the linked list

[output] linkedlist.integer

Head of the result linked list
Given a linked list, return the value of the middle node. If there are an even number of nodes, return the 2nd middle node.

You are allowed to only make 1 pass through the linked list.

Example:
Input: [1,2,3,4,5,6]
Output: 4


Given a linked list, swap the head (first element) and the tail (last element) of the linked list, and return the new head.

Example:
Input: [1,2,3,4,5,6]
Output: [6,2,3,4,5,1]
Given a linked list of integers, return the sum of every other value, starting with the second.

Remove the nth node from the end of a linked list. n is 1-indexed. Assume n will always be smaller or equal to the length of the linked list.

Example:
Input: [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Remove the nth node from the end of a linked list. n is 1-indexed. Assume n will always be smaller or equal to the length of the linked list.

Example:
Input: [1,2,3,4,5], n = 2
Output: [1,2,3,5]


Write a function which determines whether a positive number is an integer power of three. For example:

Q. Given a linked list, insert a node with the value 0 after each existing node. This should double the length of the original list and every other value should be a 0.


Q. Given a target integer and count integer, create a linked list of length count, where each node has the value target.
Q. Given a linked list of positive integers, find the first element that occurs at least k number of times.

If no element occurs k times, return -1.
You may assume k is greater than zero.


Q. Given a linked list, limit the number of repetitions to k. Iterate through the linked list, keeping track of how many times the value has been repeated. Once a value has been repeated k target number of times, remove any future instances of that node.

Q. Given a linked list, remove all nodes with an odd value from the list.

[execution time limit] 4 seconds (py3)

[memory limit] 1 GB

[input] linkedlist.integer head

head of the list

[output] linkedlist.integer

head of the updated list

#
Q. Given a linked list and a target, remove all nodes that are NOT the target value

For example, given this linked list:
1 -> 5 -> 5 -> 2, target 5

Return this list:
5 -> 5

#Q. Remove every other node in a linked list, starting from the second node.

For example, given:
1 -> 3 -> 6 -> 2

Return:
1 -> 6

Given the head of a singly linked list, return true if it is a 
palindrome
 or false otherwise.

 https://leetcode.com/problems/palindrome-linked-list/description/


 #Given a linked list, remove the head and tail of the list and return the new list

For example, given the list:
1 -> 3 -> 5 -> 2

Return:
3 -> 5


Given a linked list, remove the center node. If the length of the list is even, remove the first of the two center nodes.

For example, given this list:
1 -> 2 -> 3 -> 4

Return:

Q. Given two linked lists of different length, sum elements' value at the same position.

Example:
Input: LL1: 1->2->5, LL2: 3->4
Output: 4->6->5
Q. Given a linked list, return the value of the element that is at the 1/3 position from the head.

You may assume the total number of elements is multiples of 3 (e.g. 3, 6, 9, 12 ...).



Q. Given a linked list, make a copy of the list from the kth position (from the head) to the end of the list.

You may assume all elements have positive integer value, and k is positive.
k position/index follows the one-based numbering rule (i.e. the position/index of the first element of an array is 1, not 0).
If k exceeds the length of the list, return a linked list node with a value -1 instead.



"Q. Given an unsorted linked list with unique values, insert an element before the target element

If target cannot be found in the list, do nothing.
Example:

Given a linked list: 3 -> -1 -> 2 -> 5, element (to be inserted): 0, target: 2
// returns: 3 -> -1 -> 0 -> 2 -> 5"