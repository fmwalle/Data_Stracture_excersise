Implement the following algorithm to pass the test suite.

Initialize a current variable to the head
Initialize a future variable to the node after head
While future exists
If the current's value is equal to the future's value, update current's next ptr to future's next ptr
Otherwise, update current to future
Advance the future ptr
Return head
[execution time limit] 4 seconds (py3)

[memory limit] 1 GB

[input] linkedlist.integer head

[output] linkedlist.integer

[Python 3] Syntax Tips



Implement the following algorithm to iteratively reverse a linked list and to pass the test suite.

Initialize a prev pointer variable to null
Initialize a current pointer variable to head
While current exists
Initialize a future pointer variable to the node after current
Point current's next to prev
Set prev to current
Set current to future
Return prev
[execution time limit] 4 seconds (py3)

[memory limit] 1 GB

[input] linkedlist.integer head

[output] linkedlist.integer


Implement the following algorithm to check if a linked list is a palindrome and to pass the test suite.

Initialize a slow pointer to the head
Initialize a fast pointer to the head
Initialize an empty stack
While fast and its next node both exist
Push the value of slow onto the stack
Advance the slow ptr
Advance the fast twice
If fast exists (the list is an odd length), advance the slow ptr
While slow exists
If slow's value is not equal to the top element in the stack, return false
Advance the slow ptr
It's a palindrome so return true