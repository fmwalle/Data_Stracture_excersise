Q.  Given an array of integers and a target integer, return indices of the two numbers such that they add up to the target.

You may assume there is one unique solution pair, and the same element cannot be used twice.
You must return a solution pair sorted in ascending order.
[execution time limit] 4 seconds (py3)

[memory limit] 1 GB

[input] array.integer array

[input] integer target

[output] array.integer

Given any string str, sort the characters in descending order based on the number of occurrences of each character in the string str.

Return an array of the characters in order. You may assume each character has a distinct frequency.

eg: "gggghhleee" => ["g", "e", "h", "l"]

g is the only letter with a frequency of 4
e is the only letter with a frequency of 3
h is the only letter with a frequency of 2
l is the only letter with a frequency of 1


Let's define a group of anagrams as a list of words, where each group shares the same anagram.

Anagram means you can rearrange the letters to form any other word in the group (eg: tea could be transformed into eat).

Given a list of words, split it into the smallest possible number of groups of anagrams and return this number as the answer.

Example

For words = ["tea", "eat", "apple", "ate", "vaja", "cut", "java", "utc"], the output should be 4 (groups).

The 4 groups of anagrams in this example are ("tea", "eat", "ate"), ("apple"), ("vaja", "java"), and ("cut", "utc").

When solving this problem, consider how you tell whether any set of words are anagrams, and how you might group them together.

For example, "tea" and "eat" share the same anagram - think about how you would figure this out programmatically.

Ultimately, we want to return the number of groups (distinct anagrams, not distinct words) in the input array.



Given a string, return the first letter in the string that is repeated. Return a "_" character if all of the characters are unique and not repeated.

[execution time limit] 4 seconds (py3)

[memory limit] 1 GB

[input] string str

[output] char



You have a set of integers nums, which originally contains all the numbers from 1 to n. Unfortunately,
due to some error, one of the numbers in nums got duplicated to another number
in the set, which results in the repetition of one number and the loss of another number.

You are given an integer array nums representing the data after the error. Return the missing number. If no number is missing, return -1.

Input: nums = [1,2,2,4]
Output: 3
Input: nums = [1,1]
Output: 2
Input: nums = [3,1,2]
Output: -1
[execution time limit] 4 seconds (py3)

[memory limit] 1 GB

[input] array.integer nums

[output] integer